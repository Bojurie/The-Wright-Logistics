{"ast":null,"code":"import _defineProperty from \"/Users/macbookair/Desktop/WEB -MOBILE-DEVELOPMENT 2021/React-Folder/The_Wright_Logistics/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/macbookair/Desktop/WEB -MOBILE-DEVELOPMENT 2021/React-Folder/The_Wright_Logistics/my-app/src/components/auth/RegisterForm.js\";\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { reduxForm, Field, Form } from \"redux-form\"; // import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { FormTitle } from \"../formTitle\";\nimport { FormInput, FormButton } from \"../formFields\";\nimport TextLink from \"../textLink\";\nimport './RegisterForm.css'; // import axios from '../api/axios'\n// const FULLNAME_REGEX=/^[A-z][A-z0-9-_]{3,23}$/;\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// const COMPANY_REGEX =/^[A-z][A-z0-9-_]{3,23}$/;\n// const EMAIL_REGEX= /^[A-z][A-z0-9-_]{3,23}$/;\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n// const REGISTER_URL = '/register';\n\nvar RegisterForm = function RegisterForm() {\n  var _React$createElement;\n\n  // const fullNameRef = useRef();\n  // const userRef = useRef();\n  // const companyRef = useRef();\n  // const emailRef = useRef();\n  // const pwdRef = useRef();\n  // const errRef = useRef();\n  // const [fullName, setFullName] = useState('');\n  // const [validFullName, setValidFullName] = useState(false);\n  // const [fullNameFocus, setFullNameFocus] = useState(false);  \n  // const [user, setUser] = useState('');\n  // const [validName, setValidName] = useState(false);\n  // const [userFocus, setUserFocus] = useState(false);\n  // const [companyName, setCompanyName] = useState('');\n  // const [validCompanyName, setValidCompanyName] = useState(false);\n  // const [companyNameFocus, setCompanyNameFocus] = useState(false); \n  // const [email, setEmail] = useState('');\n  // const [validEmail, setValidEmail] = useState(false);\n  // const [emailFocus, setEmailFocus] = useState(false);  \n  // const [pwd, setPwd] = useState('');\n  // const [validPwd, setValidPwd] = useState(false);\n  // const [pwdFocus, setPwdFocus] = useState(false);  \n  // const [errMsg, setErrMsg] = useState('');\n  // const [success, setSuccess] = useState(false);\n  // useEffect(() => {\n  //     userRef.current.focus();\n  // }, [])\n  // useEffect(() => {\n  //     setValidFullName(USER_REGEX.test(fullName));\n  // }, [fullName])\n  // useEffect(() => {\n  //     setValidName(USER_REGEX.test(user));\n  // }, [user])\n  // useEffect(() => {\n  //     setValidEmail(USER_REGEX.test(companyName));\n  // }, [companyName])\n  // useEffect(() => {\n  //     setValidCompanyName(USER_REGEX.test(email));\n  // }, [email])\n  // useEffect(() => {\n  //     setValidPwd(PWD_REGEX.test(pwd));\n  // }, [pwd])\n  // useEffect(() => {\n  //     setErrMsg('');\n  // }, [user, pwd])\n  // const handleSubmit = (e) => {\n  // }\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n  //       const v1 = USER_REGEX.test(user);\n  //       const v2 = PWD_REGEX.test(pwd);\n  //       const v3 = COMPANY_REGEX.test(companyName);\n  //       const v4 = EMAIL_REGEX.test(user);\n  //       const v5 = FULLNAME_REGEX.test(fullName);\n  //       if (!v1 || !v2 || !v3 || !v4 || !v5) {\n  //           setErrMsg(\"Invalid Entry\");\n  //           return;\n  //       }\n  //     try {\n  //         const response = await axios.post(REGISTER_URL,\n  //             JSON.stringify({name: fullName ,userName: user, company: companyName, email: email, password: pwd }),\n  //             {\n  //                 headers: { 'Content-Type': 'application/json' },\n  //                 withCredentials: true\n  //             }\n  //         );\n  //         \n  //         setSuccess(true);\n  //         // clear state and controlled inputs\n  //         // need value attrib on inputs for this\n  //         setFullName('');\n  //         setUser('');\n  //         setCompanyName('');\n  //         setEmail('');\n  //         setPwd('');\n  //     } catch (err) {\n  //         if (!err?.response) {\n  //             setErrMsg('No Server Response');\n  //         } else if (err.response?.status === 409) {\n  //             setErrMsg('Username Taken');\n  //         } else {\n  //             setErrMsg('Registration Failed')\n  //         }\n  //         errRef.current.focus();\n  //     }\n  //   }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, success ? /*#__PURE__*/React.createElement(\"section\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, \"Success!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, \"Sign In\"))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    ref: errRef,\n    className: errMsg ? \"errmsg\" : \"offscreen\",\n    \"aria-live\": \"assertive\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, errMsg), /*#__PURE__*/React.createElement(Form, {\n    className: \"sign-up-form\",\n    method: \"POST\",\n    action: \"/register\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormTitle, {\n    className: \"sign-up-form__title\",\n    text: \"New User\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    id: \"fullName\",\n    className: \"sign-up-form__fullname\",\n    name: \"fullname\",\n    type: \"text\",\n    title: \"Full Name\",\n    onChange: function onChange(e) {\n      return setFullName(e.target.value);\n    },\n    component: FormInput,\n    ref: fullNameRef,\n    autoComplete: \"off\",\n    required: true,\n    \"aria-invalid\": validFullName ? \"false\" : \"true\",\n    \"aria-describedby\": \"uidnote\",\n    onFocus: function onFocus() {\n      return setFullNameFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setFullNameFocus(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: fullNameFocus && fullName && !validFullName ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 32\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 38\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, (_React$createElement = {\n    id: \"user\",\n    type: \"text\"\n  }, _defineProperty(_React$createElement, \"id\", \"username\"), _defineProperty(_React$createElement, \"ref\", userRef), _defineProperty(_React$createElement, \"autoComplete\", \"off\"), _defineProperty(_React$createElement, \"onChange\", function onChange(e) {\n    return setUser(e.target.value);\n  }), _defineProperty(_React$createElement, \"value\", user), _defineProperty(_React$createElement, \"required\", true), _defineProperty(_React$createElement, \"aria-invalid\", validName ? \"false\" : \"true\"), _defineProperty(_React$createElement, \"aria-describedby\", \"uidnote\"), _defineProperty(_React$createElement, \"onFocus\", function onFocus() {\n    return setUserFocus(true);\n  }), _defineProperty(_React$createElement, \"onBlur\", function onBlur() {\n    return setUserFocus(false);\n  }), _defineProperty(_React$createElement, \"__self\", _this), _defineProperty(_React$createElement, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 11\n  }), _React$createElement)), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: userFocus && user && !validName ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 32\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 38\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"company\",\n    className: \"sign-up-form__fullname\",\n    placeholder: \"EnterCompany Name\",\n    name: \"company\",\n    type: \"text\",\n    title: \"Company Name\",\n    ref: companyRef,\n    autoComplete: \"off\",\n    onChange: function onChange(e) {\n      return setCompanyName(e.target.value);\n    },\n    component: FormInput,\n    value: companyName,\n    required: true,\n    \"aria-invalid\": validCompanyName ? \"false\" : \"true\",\n    \"aria-describedby\": \"companynote\",\n    onFocus: function onFocus() {\n      return setCompanyNameFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setCompanyNameFocus(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: companyNameFocus && companyName && !validCompanyName ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 34\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 40\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"email\",\n    className: \"sign-up-form__email\",\n    placeholder: \"Enter Email\",\n    name: \"email\",\n    type: \"email\",\n    title: \"Email\",\n    ref: emailRef,\n    autoComplete: \"off\",\n    onChange: function onChange(e) {\n      return setEmail(e.target.value);\n    },\n    component: FormInput,\n    value: email,\n    required: true,\n    \"aria-invalid\": validEmail ? \"false\" : \"true\",\n    \"aria-describedby\": \"emailnote\",\n    onFocus: function onFocus() {\n      return setEmailFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setEmailFocus(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 34\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 40\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"password\",\n    className: \"sign-up-form__password\",\n    name: \"password\",\n    type: \"password\",\n    title: \"Password\",\n    ref: pwdRef,\n    autoComplete: \"off\",\n    onChange: function onChange(e) {\n      return setPwd(e.target.value);\n    },\n    component: FormInput,\n    value: pwd,\n    required: true,\n    \"aria-invalid\": validPwd ? \"false\" : \"true\",\n    \"aria-describedby\": \"pwdnote\",\n    onFocus: function onFocus() {\n      return setPwdFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setPwdFocus(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: pwdFocus && pwd && !validPwd ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 34\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 40\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, {\n    className: \"sign-up-form__create-account\",\n    name: \"createaccount\",\n    type: \"submit\",\n    title: \"Create Account\",\n    component: FormButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-up-form__text-links\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextLink, {\n    to: \"/signin\",\n    text: \"Already Registered? Login\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default reduxForm({\n  form: 'register'\n})(RegisterForm);","map":{"version":3,"sources":["/Users/macbookair/Desktop/WEB -MOBILE-DEVELOPMENT 2021/React-Folder/The_Wright_Logistics/my-app/src/components/auth/RegisterForm.js"],"names":["React","useRef","useState","useEffect","reduxForm","Field","Form","FormTitle","FormInput","FormButton","TextLink","RegisterForm","success","errRef","errMsg","e","setFullName","target","value","fullNameRef","validFullName","setFullNameFocus","fullNameFocus","fullName","userRef","setUser","user","validName","setUserFocus","userFocus","companyRef","setCompanyName","companyName","validCompanyName","setCompanyNameFocus","companyNameFocus","emailRef","setEmail","email","validEmail","setEmailFocus","emailFocus","pwdRef","setPwd","pwd","validPwd","setPwdFocus","pwdFocus","form"],"mappings":"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","sourcesContent":["import React, {useRef, useState, useEffect } from \"react\";\nimport { reduxForm, Field, Form } from \"redux-form\";\n// import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { FormTitle } from \"../formTitle\";\nimport { FormInput, FormButton } from \"../formFields\";\nimport TextLink from \"../textLink\";\nimport './RegisterForm.css'\n// import axios from '../api/axios'\n\n// const FULLNAME_REGEX=/^[A-z][A-z0-9-_]{3,23}$/;\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// const COMPANY_REGEX =/^[A-z][A-z0-9-_]{3,23}$/;\n// const EMAIL_REGEX= /^[A-z][A-z0-9-_]{3,23}$/;\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n\n\n\n// const REGISTER_URL = '/register';\n\nconst RegisterForm = () => {\n    // const fullNameRef = useRef();\n    // const userRef = useRef();\n    // const companyRef = useRef();\n    // const emailRef = useRef();\n    // const pwdRef = useRef();\n    // const errRef = useRef();\n\n    // const [fullName, setFullName] = useState('');\n    // const [validFullName, setValidFullName] = useState(false);\n    // const [fullNameFocus, setFullNameFocus] = useState(false);  \n\n    // const [user, setUser] = useState('');\n    // const [validName, setValidName] = useState(false);\n    // const [userFocus, setUserFocus] = useState(false);\n\n    // const [companyName, setCompanyName] = useState('');\n    // const [validCompanyName, setValidCompanyName] = useState(false);\n    // const [companyNameFocus, setCompanyNameFocus] = useState(false); \n    \n    // const [email, setEmail] = useState('');\n    // const [validEmail, setValidEmail] = useState(false);\n    // const [emailFocus, setEmailFocus] = useState(false);  \n\n    // const [pwd, setPwd] = useState('');\n    // const [validPwd, setValidPwd] = useState(false);\n    // const [pwdFocus, setPwdFocus] = useState(false);  \n\n    // const [errMsg, setErrMsg] = useState('');\n    // const [success, setSuccess] = useState(false);\n\n    // useEffect(() => {\n    //     userRef.current.focus();\n    // }, [])\n\n    // useEffect(() => {\n    //     setValidFullName(USER_REGEX.test(fullName));\n    // }, [fullName])\n\n    // useEffect(() => {\n    //     setValidName(USER_REGEX.test(user));\n    // }, [user])\n\n    // useEffect(() => {\n    //     setValidEmail(USER_REGEX.test(companyName));\n    // }, [companyName])\n\n    // useEffect(() => {\n    //     setValidCompanyName(USER_REGEX.test(email));\n    // }, [email])\n\n    // useEffect(() => {\n    //     setValidPwd(PWD_REGEX.test(pwd));\n    // }, [pwd])\n\n    // useEffect(() => {\n    //     setErrMsg('');\n    // }, [user, pwd])\n\n    // const handleSubmit = (e) => {\n\n    // }\n\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n  //       const v1 = USER_REGEX.test(user);\n  //       const v2 = PWD_REGEX.test(pwd);\n  //       const v3 = COMPANY_REGEX.test(companyName);\n  //       const v4 = EMAIL_REGEX.test(user);\n  //       const v5 = FULLNAME_REGEX.test(fullName);\n\n       \n  //       if (!v1 || !v2 || !v3 || !v4 || !v5) {\n  //           setErrMsg(\"Invalid Entry\");\n  //           return;\n  //       }\n  //     try {\n  //         const response = await axios.post(REGISTER_URL,\n  //             JSON.stringify({name: fullName ,userName: user, company: companyName, email: email, password: pwd }),\n  //             {\n  //                 headers: { 'Content-Type': 'application/json' },\n  //                 withCredentials: true\n  //             }\n  //         );\n  //         \n  //         setSuccess(true);\n          \n  //         // clear state and controlled inputs\n  //         // need value attrib on inputs for this\n  //         setFullName('');\n  //         setUser('');\n  //         setCompanyName('');\n  //         setEmail('');\n  //         setPwd('');\n          \n  //     } catch (err) {\n  //         if (!err?.response) {\n  //             setErrMsg('No Server Response');\n  //         } else if (err.response?.status === 409) {\n  //             setErrMsg('Username Taken');\n  //         } else {\n  //             setErrMsg('Registration Failed')\n  //         }\n  //         errRef.current.focus();\n  //     }\n  //   }\n  \n    return (\n      <>\n      {success ? (\n                <section>\n                    <h1>Success!</h1>\n                    <p>\n                        <a href=\"#\">Sign In</a>\n                    </p>\n                </section>\n            ) : (\n        <div>\n          <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n\n        <Form className=\"sign-up-form\" method=\"POST\" action=\"/register\">\n\n      \n          <FormTitle className=\"sign-up-form__title\" text=\"New User\" />\n          <Field\n            id='fullName'\n            className=\"sign-up-form__fullname\"\n            name=\"fullname\"\n            type=\"text\"\n            title=\"Full Name\"\n            onChange={(e) => setFullName(e.target.value)}\n            component={FormInput}\n            ref={fullNameRef}\n            autoComplete=\"off\"\n            required\n            aria-invalid={validFullName ? \"false\" : \"true\"}\n            aria-describedby=\"uidnote\"\n            onFocus={() => setFullNameFocus(true)}\n            onBlur={() => setFullNameFocus(false)}\n          />\n          <p id=\"uidnote\" \n            className={fullNameFocus && fullName && !validFullName ? \"instructions\" : \"offscreen\"}>\n            {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n            4 to 24 characters.<br />\n            Must begin with a letter.<br />\n            Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n\n          <Field\n            id='user'\n            type=\"text\"\n            id=\"username\"\n            ref={userRef}\n            autoComplete=\"off\"\n            onChange={(e) => setUser(e.target.value)}\n            value={user}\n            required\n            aria-invalid={validName ? \"false\" : \"true\"}\n            aria-describedby=\"uidnote\"\n            onFocus={() => setUserFocus(true)}\n            onBlur={() => setUserFocus(false)}\n        />\n        <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\n            {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n            4 to 24 characters.<br />\n            Must begin with a letter.<br />\n            Letters, numbers, underscores, hyphens allowed.\n        </p>\n\n          <Field\n            id='company'\n            className=\"sign-up-form__fullname\"\n            placeholder=\"EnterCompany Name\"\n            name=\"company\"\n            type=\"text\"\n            title=\"Company Name\"\n            ref={companyRef}\n            autoComplete=\"off\"\n            onChange={(e) => setCompanyName(e.target.value)}\n            component={FormInput}\n            value={companyName}\n            required\n            aria-invalid={validCompanyName ? \"false\" : \"true\"}\n            aria-describedby=\"companynote\"\n            onFocus={() => setCompanyNameFocus(true)}\n            onBlur={() => setCompanyNameFocus(false)}\n          />\n            <p id=\"uidnote\" className={companyNameFocus && companyName && !validCompanyName ? \"instructions\" : \"offscreen\"}>\n              {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n              4 to 24 characters.<br />\n              Must begin with a letter.<br />\n              Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n          <Field\n            id=\"email\"\n            className=\"sign-up-form__email\"\n            placeholder=\"Enter Email\"\n            name=\"email\"\n            type=\"email\"\n            title=\"Email\"\n            ref={emailRef}\n            autoComplete=\"off\"\n            onChange={(e) => setEmail(e.target.value)}\n            component={FormInput}\n            value={email}\n            required\n            aria-invalid={validEmail ? \"false\" : \"true\"}\n            aria-describedby=\"emailnote\"\n            onFocus={() => setEmailFocus(true)}\n            onBlur={() => setEmailFocus(false)}\n\n          />\n          <p id=\"uidnote\" className={emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\"}>\n              {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n              4 to 24 characters.<br />\n              Must begin with a letter.<br />\n              Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n          <Field\n            id=\"password\"\n            className=\"sign-up-form__password\"\n            name=\"password\"\n            type=\"password\"\n            title=\"Password\"\n            ref={pwdRef}\n            autoComplete=\"off\"\n            onChange={(e) => setPwd(e.target.value)}\n            component={FormInput}\n            value={pwd}\n            required\n            aria-invalid={validPwd ? \"false\" : \"true\"}\n            aria-describedby=\"pwdnote\"\n            onFocus={() => setPwdFocus(true)}\n            onBlur={() => setPwdFocus(false)}\n          />\n          <p id=\"uidnote\" className={pwdFocus && pwd && !validPwd ? \"instructions\" : \"offscreen\"}>\n              {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n              4 to 24 characters.<br />\n              Must begin with a letter.<br />\n              Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n          <Field\n            className=\"sign-up-form__create-account\"\n            name=\"createaccount\"\n            type=\"submit\"\n            title=\"Create Account\"\n            component={FormButton}\n          />\n          <div className='sign-up-form__text-links'>\n              <TextLink to='/signin' text='Already Registered? Login'/>\n          </div>\n        </Form>\n      </div>\n    )}\n  </>\n  );\n}\n\nexport default reduxForm({\n  form: 'register'\n})(RegisterForm)"]},"metadata":{},"sourceType":"module"}