{"ast":null,"code":"import _defineProperty from \"/Users/macbookair/Desktop/WEB -MOBILE-DEVELOPMENT 2021/React-Folder/The_Wright_Logistics/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/macbookair/Desktop/WEB -MOBILE-DEVELOPMENT 2021/React-Folder/The_Wright_Logistics/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/macbookair/Desktop/WEB -MOBILE-DEVELOPMENT 2021/React-Folder/The_Wright_Logistics/my-app/src/components/auth/RegisterForm.js\";\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { reduxForm, Field } from \"redux-form\"; // import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { FormTitle } from \"../formTitle\";\nimport { FormInput, FormButton } from \"../formFields\";\nimport TextLink from \"../textLink\";\nimport './RegisterForm.css'; // import axios from '../api/axios'\n\nvar FULLNAME_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\nvar USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\nvar COMPANY_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\nvar EMAIL_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\nvar PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\nvar REGISTER_URL = '/register';\n\nvar RegisterForm = function RegisterForm() {\n  var _React$createElement;\n\n  var fullNameRef = useRef();\n  var userRef = useRef();\n  var companyRef = useRef();\n  var emailRef = useRef();\n  var pwdRef = useRef();\n  var errRef = useRef();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      fullName = _useState2[0],\n      setFullName = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validFullName = _useState4[0],\n      setValidFullName = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fullNameFocus = _useState6[0],\n      setFullNameFocus = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      user = _useState8[0],\n      setUser = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      validName = _useState10[0],\n      setValidName = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      userFocus = _useState12[0],\n      setUserFocus = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      companyName = _useState14[0],\n      setCompanyName = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      validCompanyName = _useState16[0],\n      setValidCompanyName = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      companyNameFocus = _useState18[0],\n      setCompanyNameFocus = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      email = _useState20[0],\n      setEmail = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      validEmail = _useState22[0],\n      setValidEmail = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      emailFocus = _useState24[0],\n      setEmailFocus = _useState24[1];\n\n  var _useState25 = useState(''),\n      _useState26 = _slicedToArray(_useState25, 2),\n      pwd = _useState26[0],\n      setPwd = _useState26[1];\n\n  var _useState27 = useState(false),\n      _useState28 = _slicedToArray(_useState27, 2),\n      validPwd = _useState28[0],\n      setValidPwd = _useState28[1];\n\n  var _useState29 = useState(false),\n      _useState30 = _slicedToArray(_useState29, 2),\n      pwdFocus = _useState30[0],\n      setPwdFocus = _useState30[1];\n\n  var _useState31 = useState(''),\n      _useState32 = _slicedToArray(_useState31, 2),\n      errMsg = _useState32[0],\n      setErrMsg = _useState32[1];\n\n  var _useState33 = useState(false),\n      _useState34 = _slicedToArray(_useState33, 2),\n      success = _useState34[0],\n      setSuccess = _useState34[1];\n\n  useEffect(function () {\n    userRef.current.focus();\n  }, []);\n  useEffect(function () {\n    setValidFullName(USER_REGEX.test(fullName));\n  }, [fullName]);\n  useEffect(function () {\n    setValidName(USER_REGEX.test(user));\n  }, [user]);\n  useEffect(function () {\n    setValidEmail(USER_REGEX.test(companyName));\n  }, [companyName]);\n  useEffect(function () {\n    setValidCompanyName(USER_REGEX.test(email));\n  }, [email]);\n  useEffect(function () {\n    setValidPwd(PWD_REGEX.test(pwd));\n  }, [pwd]);\n  useEffect(function () {\n    setErrMsg('');\n  }, [user, pwd]);\n\n  var handleSubmit = function handleSubmit(e) {}; // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n  //       const v1 = USER_REGEX.test(user);\n  //       const v2 = PWD_REGEX.test(pwd);\n  //       const v3 = COMPANY_REGEX.test(companyName);\n  //       const v4 = EMAIL_REGEX.test(user);\n  //       const v5 = FULLNAME_REGEX.test(fullName);\n  //       if (!v1 || !v2 || !v3 || !v4 || !v5) {\n  //           setErrMsg(\"Invalid Entry\");\n  //           return;\n  //       }\n  //     try {\n  //         const response = await axios.post(REGISTER_URL,\n  //             JSON.stringify({name: fullName ,userName: user, company: companyName, email: email, password: pwd }),\n  //             {\n  //                 headers: { 'Content-Type': 'application/json' },\n  //                 withCredentials: true\n  //             }\n  //         );\n  //         \n  //         setSuccess(true);\n  //         // clear state and controlled inputs\n  //         // need value attrib on inputs for this\n  //         setFullName('');\n  //         setUser('');\n  //         setCompanyName('');\n  //         setEmail('');\n  //         setPwd('');\n  //     } catch (err) {\n  //         if (!err?.response) {\n  //             setErrMsg('No Server Response');\n  //         } else if (err.response?.status === 409) {\n  //             setErrMsg('Username Taken');\n  //         } else {\n  //             setErrMsg('Registration Failed')\n  //         }\n  //         errRef.current.focus();\n  //     }\n  //   }\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, success ? /*#__PURE__*/React.createElement(\"section\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, \"Success!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, \"Sign In\"))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    ref: errRef,\n    className: errMsg ? \"errmsg\" : \"offscreen\",\n    \"aria-live\": \"assertive\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, errMsg), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"sign-up-form\",\n    method: \"POST\",\n    action: \"/register\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormTitle, {\n    className: \"sign-up-form__title\",\n    text: \"New User\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    id: \"fullName\",\n    className: \"sign-up-form__fullname\",\n    name: \"fullname\",\n    type: \"text\",\n    title: \"Full Name\",\n    onChange: function onChange(e) {\n      return setFullName(e.target.value);\n    },\n    component: FormInput,\n    ref: fullNameRef,\n    autoComplete: \"off\",\n    required: true,\n    \"aria-invalid\": validFullName ? \"false\" : \"true\",\n    \"aria-describedby\": \"uidnote\",\n    onFocus: function onFocus() {\n      return setFullNameFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setFullNameFocus(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: fullNameFocus && fullName && !validFullName ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 32\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 38\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, (_React$createElement = {\n    id: \"user\",\n    type: \"text\"\n  }, _defineProperty(_React$createElement, \"id\", \"username\"), _defineProperty(_React$createElement, \"ref\", userRef), _defineProperty(_React$createElement, \"autoComplete\", \"off\"), _defineProperty(_React$createElement, \"onChange\", function onChange(e) {\n    return setUser(e.target.value);\n  }), _defineProperty(_React$createElement, \"value\", user), _defineProperty(_React$createElement, \"required\", true), _defineProperty(_React$createElement, \"aria-invalid\", validName ? \"false\" : \"true\"), _defineProperty(_React$createElement, \"aria-describedby\", \"uidnote\"), _defineProperty(_React$createElement, \"onFocus\", function onFocus() {\n    return setUserFocus(true);\n  }), _defineProperty(_React$createElement, \"onBlur\", function onBlur() {\n    return setUserFocus(false);\n  }), _defineProperty(_React$createElement, \"__self\", _this), _defineProperty(_React$createElement, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 11\n  }), _React$createElement)), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: userFocus && user && !validName ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 32\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 38\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"company\",\n    className: \"sign-up-form__fullname\",\n    placeholder: \"EnterCompany Name\",\n    name: \"company\",\n    type: \"text\",\n    title: \"Company Name\",\n    ref: companyRef,\n    autoComplete: \"off\",\n    onChange: function onChange(e) {\n      return setCompanyName(e.target.value);\n    },\n    component: FormInput,\n    value: companyName,\n    required: true,\n    \"aria-invalid\": validCompanyName ? \"false\" : \"true\",\n    \"aria-describedby\": \"companynote\",\n    onFocus: function onFocus() {\n      return setCompanyNameFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setCompanyNameFocus(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: companyNameFocus && companyName && !validCompanyName ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 34\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 40\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"email\",\n    className: \"sign-up-form__email\",\n    placeholder: \"Enter Email\",\n    name: \"email\",\n    type: \"email\",\n    title: \"Email\",\n    ref: emailRef,\n    autoComplete: \"off\",\n    onChange: function onChange(e) {\n      return setEmail(e.target.value);\n    },\n    component: FormInput,\n    value: email,\n    required: true,\n    \"aria-invalid\": validEmail ? \"false\" : \"true\",\n    \"aria-describedby\": \"emailnote\",\n    onFocus: function onFocus() {\n      return setEmailFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setEmailFocus(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 34\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 40\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, {\n    id: \"password\",\n    className: \"sign-up-form__password\",\n    name: \"password\",\n    type: \"password\",\n    title: \"Password\",\n    ref: pwdRef,\n    autoComplete: \"off\",\n    onChange: function onChange(e) {\n      return setPwd(e.target.value);\n    },\n    component: FormInput,\n    value: pwd,\n    required: true,\n    \"aria-invalid\": validPwd ? \"false\" : \"true\",\n    \"aria-describedby\": \"pwdnote\",\n    onFocus: function onFocus() {\n      return setPwdFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setPwdFocus(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"uidnote\",\n    className: pwdFocus && pwd && !validPwd ? \"instructions\" : \"offscreen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, \"4 to 24 characters.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 34\n    }\n  }), \"Must begin with a letter.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 40\n    }\n  }), \"Letters, numbers, underscores, hyphens allowed.\"), /*#__PURE__*/React.createElement(Field, {\n    className: \"sign-up-form__create-account\",\n    name: \"createaccount\",\n    type: \"submit\",\n    title: \"Create Account\",\n    component: FormButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-up-form__text-links\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextLink, {\n    to: \"/signin\",\n    text: \"Already Registered? Login\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default reduxForm({\n  form: 'register'\n})(RegisterForm);","map":{"version":3,"sources":["/Users/macbookair/Desktop/WEB -MOBILE-DEVELOPMENT 2021/React-Folder/The_Wright_Logistics/my-app/src/components/auth/RegisterForm.js"],"names":["React","useRef","useState","useEffect","reduxForm","Field","FormTitle","FormInput","FormButton","TextLink","FULLNAME_REGEX","USER_REGEX","COMPANY_REGEX","EMAIL_REGEX","PWD_REGEX","REGISTER_URL","RegisterForm","fullNameRef","userRef","companyRef","emailRef","pwdRef","errRef","fullName","setFullName","validFullName","setValidFullName","fullNameFocus","setFullNameFocus","user","setUser","validName","setValidName","userFocus","setUserFocus","companyName","setCompanyName","validCompanyName","setValidCompanyName","companyNameFocus","setCompanyNameFocus","email","setEmail","validEmail","setValidEmail","emailFocus","setEmailFocus","pwd","setPwd","validPwd","setValidPwd","pwdFocus","setPwdFocus","errMsg","setErrMsg","success","setSuccess","current","focus","test","handleSubmit","e","target","value","form"],"mappings":"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","sourcesContent":["import React, {useRef, useState, useEffect } from \"react\";\nimport { reduxForm, Field } from \"redux-form\";\n// import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { FormTitle } from \"../formTitle\";\nimport { FormInput, FormButton } from \"../formFields\";\nimport TextLink from \"../textLink\";\nimport './RegisterForm.css'\n// import axios from '../api/axios'\n\nconst FULLNAME_REGEX=/^[A-z][A-z0-9-_]{3,23}$/;\nconst USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\nconst COMPANY_REGEX =/^[A-z][A-z0-9-_]{3,23}$/;\nconst EMAIL_REGEX= /^[A-z][A-z0-9-_]{3,23}$/;\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n\n\n\nconst REGISTER_URL = '/register';\n\nconst RegisterForm = () => {\n    const fullNameRef = useRef();\n    const userRef = useRef();\n    const companyRef = useRef();\n    const emailRef = useRef();\n    const pwdRef = useRef();\n    const errRef = useRef();\n\n    const [fullName, setFullName] = useState('');\n    const [validFullName, setValidFullName] = useState(false);\n    const [fullNameFocus, setFullNameFocus] = useState(false);  \n\n    const [user, setUser] = useState('');\n    const [validName, setValidName] = useState(false);\n    const [userFocus, setUserFocus] = useState(false);\n\n    const [companyName, setCompanyName] = useState('');\n    const [validCompanyName, setValidCompanyName] = useState(false);\n    const [companyNameFocus, setCompanyNameFocus] = useState(false); \n    \n    const [email, setEmail] = useState('');\n    const [validEmail, setValidEmail] = useState(false);\n    const [emailFocus, setEmailFocus] = useState(false);  \n\n    const [pwd, setPwd] = useState('');\n    const [validPwd, setValidPwd] = useState(false);\n    const [pwdFocus, setPwdFocus] = useState(false);  \n\n    const [errMsg, setErrMsg] = useState('');\n    const [success, setSuccess] = useState(false);\n\n    useEffect(() => {\n        userRef.current.focus();\n    }, [])\n\n    useEffect(() => {\n        setValidFullName(USER_REGEX.test(fullName));\n    }, [fullName])\n\n    useEffect(() => {\n        setValidName(USER_REGEX.test(user));\n    }, [user])\n\n    useEffect(() => {\n        setValidEmail(USER_REGEX.test(companyName));\n    }, [companyName])\n\n    useEffect(() => {\n        setValidCompanyName(USER_REGEX.test(email));\n    }, [email])\n\n    useEffect(() => {\n        setValidPwd(PWD_REGEX.test(pwd));\n    }, [pwd])\n\n    useEffect(() => {\n        setErrMsg('');\n    }, [user, pwd])\n\n    const handleSubmit = (e) => {\n\n    }\n\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n  //       const v1 = USER_REGEX.test(user);\n  //       const v2 = PWD_REGEX.test(pwd);\n  //       const v3 = COMPANY_REGEX.test(companyName);\n  //       const v4 = EMAIL_REGEX.test(user);\n  //       const v5 = FULLNAME_REGEX.test(fullName);\n\n       \n  //       if (!v1 || !v2 || !v3 || !v4 || !v5) {\n  //           setErrMsg(\"Invalid Entry\");\n  //           return;\n  //       }\n  //     try {\n  //         const response = await axios.post(REGISTER_URL,\n  //             JSON.stringify({name: fullName ,userName: user, company: companyName, email: email, password: pwd }),\n  //             {\n  //                 headers: { 'Content-Type': 'application/json' },\n  //                 withCredentials: true\n  //             }\n  //         );\n  //         \n  //         setSuccess(true);\n          \n  //         // clear state and controlled inputs\n  //         // need value attrib on inputs for this\n  //         setFullName('');\n  //         setUser('');\n  //         setCompanyName('');\n  //         setEmail('');\n  //         setPwd('');\n          \n  //     } catch (err) {\n  //         if (!err?.response) {\n  //             setErrMsg('No Server Response');\n  //         } else if (err.response?.status === 409) {\n  //             setErrMsg('Username Taken');\n  //         } else {\n  //             setErrMsg('Registration Failed')\n  //         }\n  //         errRef.current.focus();\n  //     }\n  //   }\n  \n    return (\n      <>\n      {success ? (\n                <section>\n                    <h1>Success!</h1>\n                    <p>\n                        <a href=\"#\">Sign In</a>\n                    </p>\n                </section>\n            ) : (\n        <div>\n          <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n\n        <form onSubmit={handleSubmit} className=\"sign-up-form\" method=\"POST\" action=\"/register\">\n\n      \n          <FormTitle className=\"sign-up-form__title\" text=\"New User\" />\n          <Field\n            id='fullName'\n            className=\"sign-up-form__fullname\"\n            name=\"fullname\"\n            type=\"text\"\n            title=\"Full Name\"\n            onChange={(e) => setFullName(e.target.value)}\n            component={FormInput}\n            ref={fullNameRef}\n            autoComplete=\"off\"\n            required\n            aria-invalid={validFullName ? \"false\" : \"true\"}\n            aria-describedby=\"uidnote\"\n            onFocus={() => setFullNameFocus(true)}\n            onBlur={() => setFullNameFocus(false)}\n          />\n          <p id=\"uidnote\" \n            className={fullNameFocus && fullName && !validFullName ? \"instructions\" : \"offscreen\"}>\n            {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n            4 to 24 characters.<br />\n            Must begin with a letter.<br />\n            Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n\n          <Field\n            id='user'\n            type=\"text\"\n            id=\"username\"\n            ref={userRef}\n            autoComplete=\"off\"\n            onChange={(e) => setUser(e.target.value)}\n            value={user}\n            required\n            aria-invalid={validName ? \"false\" : \"true\"}\n            aria-describedby=\"uidnote\"\n            onFocus={() => setUserFocus(true)}\n            onBlur={() => setUserFocus(false)}\n        />\n        <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\n            {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n            4 to 24 characters.<br />\n            Must begin with a letter.<br />\n            Letters, numbers, underscores, hyphens allowed.\n        </p>\n\n          <Field\n            id='company'\n            className=\"sign-up-form__fullname\"\n            placeholder=\"EnterCompany Name\"\n            name=\"company\"\n            type=\"text\"\n            title=\"Company Name\"\n            ref={companyRef}\n            autoComplete=\"off\"\n            onChange={(e) => setCompanyName(e.target.value)}\n            component={FormInput}\n            value={companyName}\n            required\n            aria-invalid={validCompanyName ? \"false\" : \"true\"}\n            aria-describedby=\"companynote\"\n            onFocus={() => setCompanyNameFocus(true)}\n            onBlur={() => setCompanyNameFocus(false)}\n          />\n            <p id=\"uidnote\" className={companyNameFocus && companyName && !validCompanyName ? \"instructions\" : \"offscreen\"}>\n              {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n              4 to 24 characters.<br />\n              Must begin with a letter.<br />\n              Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n          <Field\n            id=\"email\"\n            className=\"sign-up-form__email\"\n            placeholder=\"Enter Email\"\n            name=\"email\"\n            type=\"email\"\n            title=\"Email\"\n            ref={emailRef}\n            autoComplete=\"off\"\n            onChange={(e) => setEmail(e.target.value)}\n            component={FormInput}\n            value={email}\n            required\n            aria-invalid={validEmail ? \"false\" : \"true\"}\n            aria-describedby=\"emailnote\"\n            onFocus={() => setEmailFocus(true)}\n            onBlur={() => setEmailFocus(false)}\n\n          />\n          <p id=\"uidnote\" className={emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\"}>\n              {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n              4 to 24 characters.<br />\n              Must begin with a letter.<br />\n              Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n          <Field\n            id=\"password\"\n            className=\"sign-up-form__password\"\n            name=\"password\"\n            type=\"password\"\n            title=\"Password\"\n            ref={pwdRef}\n            autoComplete=\"off\"\n            onChange={(e) => setPwd(e.target.value)}\n            component={FormInput}\n            value={pwd}\n            required\n            aria-invalid={validPwd ? \"false\" : \"true\"}\n            aria-describedby=\"pwdnote\"\n            onFocus={() => setPwdFocus(true)}\n            onBlur={() => setPwdFocus(false)}\n          />\n          <p id=\"uidnote\" className={pwdFocus && pwd && !validPwd ? \"instructions\" : \"offscreen\"}>\n              {/* <FontAwesomeIcon icon={faInfoCircle} /> */}\n              4 to 24 characters.<br />\n              Must begin with a letter.<br />\n              Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n          <Field\n            className=\"sign-up-form__create-account\"\n            name=\"createaccount\"\n            type=\"submit\"\n            title=\"Create Account\"\n            component={FormButton}\n          />\n          <div className='sign-up-form__text-links'>\n              <TextLink to='/signin' text='Already Registered? Login'/>\n          </div>\n        </form>\n      </div>\n    )}\n  </>\n  );\n}\n\nexport default reduxForm({\n  form: 'register'\n})(RegisterForm)"]},"metadata":{},"sourceType":"module"}