{"ast":null,"code":"// import React, {useRef, useState, useEffect } from \"react\";\n// import { reduxForm, Field, Form } from \"redux-form\";\n// // import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// // import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { FormTitle } from \"../formTitle\";\n// import { FormInput, FormButton } from \"../formFields\";\n// import TextLink from \"../textLink\";\n// import './RegisterForm.css'\n// // import axios from '../api/axios'\n// // const FULLNAME_REGEX=/^[A-z][A-z0-9-_]{3,23}$/;\n// // const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// // const COMPANY_REGEX =/^[A-z][A-z0-9-_]{3,23}$/;\n// // const EMAIL_REGEX= /^[A-z][A-z0-9-_]{3,23}$/;\n// // const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n// // const REGISTER_URL = '/register';\n// const RegisterForm = () => {\n//     const fullNameRef = useRef();\n//     const userRef = useRef();\n//     const companyRef = useRef();\n//     const emailRef = useRef();\n//     const pwdRef = useRef();\n//     const errRef = useRef();\n//     const [fullName, setFullName] = useState('');\n//     const [validFullName, setValidFullName] = useState(false);\n//     const [fullNameFocus, setFullNameFocus] = useState(false);  \n//     const [user, setUser] = useState('');\n//     const [validName, setValidName] = useState(false);\n//     const [userFocus, setUserFocus] = useState(false);\n//     const [companyName, setCompanyName] = useState('');\n//     const [validCompanyName, setValidCompanyName] = useState(false);\n//     const [companyNameFocus, setCompanyNameFocus] = useState(false); \n//     const [email, setEmail] = useState('');\n//     const [validEmail, setValidEmail] = useState(false);\n//     const [emailFocus, setEmailFocus] = useState(false);  \n//     const [pwd, setPwd] = useState('');\n//     const [validPwd, setValidPwd] = useState(false);\n//     const [pwdFocus, setPwdFocus] = useState(false);  \n//     const [errMsg, setErrMsg] = useState('');\n//     const [success, setSuccess] = useState(false);\n//     useEffect(() => {\n//         userRef.current.focus();\n//     }, [])\n// useEffect(() => {\n//     setValidFullName(USER_REGEX.test(fullName));\n// }, [fullName])\n// useEffect(() => {\n//     setValidName(USER_REGEX.test(user));\n// }, [user])\n// useEffect(() => {\n//     setValidEmail(USER_REGEX.test(companyName));\n// }, [companyName])\n// useEffect(() => {\n//     setValidCompanyName(USER_REGEX.test(email));\n// }, [email])\n// useEffect(() => {\n//     setValidPwd(PWD_REGEX.test(pwd));\n// }, [pwd])\n// useEffect(() => {\n//     setErrMsg('');\n// }, [user, pwd])\n// const handleSubmit = (e) => {\n// }\n// const handleSubmit = async (e) => {\n//     e.preventDefault();\n//       const v1 = USER_REGEX.test(user);\n//       const v2 = PWD_REGEX.test(pwd);\n//       const v3 = COMPANY_REGEX.test(companyName);\n//       const v4 = EMAIL_REGEX.test(user);\n//       const v5 = FULLNAME_REGEX.test(fullName);\n//       if (!v1 || !v2 || !v3 || !v4 || !v5) {\n//           setErrMsg(\"Invalid Entry\");\n//           return;\n//       }\n//     try {\n//         const response = await axios.post(REGISTER_URL,\n//             JSON.stringify({name: fullName ,userName: user, company: companyName, email: email, password: pwd }),\n//             {\n//                 headers: { 'Content-Type': 'application/json' },\n//                 withCredentials: true\n//             }\n//         );\n//         \n//         setSuccess(true);\n//         // clear state and controlled inputs\n//         // need value attrib on inputs for this\n//         setFullName('');\n//         setUser('');\n//         setCompanyName('');\n//         setEmail('');\n//         setPwd('');\n//     } catch (err) {\n//         if (!err?.response) {\n//             setErrMsg('No Server Response');\n//         } else if (err.response?.status === 409) {\n//             setErrMsg('Username Taken');\n//         } else {\n//             setErrMsg('Registration Failed')\n//         }\n//         errRef.current.focus();\n//     }\n//   }\n//     return (\n//       <>\n//       {success ? (\n//                 <section>\n//                     <h1>Success!</h1>\n//                     <p>\n//                         <a href=\"#\">Sign In</a>\n//                     </p>\n//                 </section>\n//             ) : (\n//         <div>\n//           <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n//         <Form className=\"sign-up-form\" method=\"POST\" action=\"/register\">\n//           <FormTitle className=\"sign-up-form__title\" text=\"New User\" />\n//           <Field\n//             id='fullName'\n//             className=\"sign-up-form__fullname\"\n//             name=\"fullname\"\n//             type=\"text\"\n//             title=\"Full Name\"\n//             onChange={(e) => setFullName(e.target.value)}\n//             component={FormInput}\n//             ref={fullNameRef}\n//             autoComplete=\"off\"\n//             required\n//             aria-invalid={validFullName ? \"false\" : \"true\"}\n//             aria-describedby=\"uidnote\"\n//             onFocus={() => setFullNameFocus(true)}\n//             onBlur={() => setFullNameFocus(false)}\n//           />\n//           <p id=\"uidnote\" \n//             className={fullNameFocus && fullName && !validFullName ? \"instructions\" : \"offscreen\"}>\n//             4 to 24 characters.<br />\n//             Must begin with a letter.<br />\n//             Letters, numbers, underscores, hyphens allowed.\n//           </p>\n//           <Field\n//             id='user'\n//             type=\"text\"\n//             id=\"username\"\n//             ref={userRef}\n//             autoComplete=\"off\"\n//             onChange={(e) => setUser(e.target.value)}\n//             value={user}\n//             required\n//             aria-invalid={validName ? \"false\" : \"true\"}\n//             aria-describedby=\"uidnote\"\n//             onFocus={() => setUserFocus(true)}\n//             onBlur={() => setUserFocus(false)}\n//         />\n//         <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\n//             4 to 24 characters.<br />\n//             Must begin with a letter.<br />\n//             Letters, numbers, underscores, hyphens allowed.\n//         </p>\n//           <Field\n//             id='company'\n//             className=\"sign-up-form__fullname\"\n//             placeholder=\"EnterCompany Name\"\n//             name=\"company\"\n//             type=\"text\"\n//             title=\"Company Name\"\n//             ref={companyRef}\n//             autoComplete=\"off\"\n//             onChange={(e) => setCompanyName(e.target.value)}\n//             component={FormInput}\n//             value={companyName}\n//             required\n//             aria-invalid={validCompanyName ? \"false\" : \"true\"}\n//             aria-describedby=\"companynote\"\n//             onFocus={() => setCompanyNameFocus(true)}\n//             onBlur={() => setCompanyNameFocus(false)}\n//           />\n//             <p id=\"uidnote\" className={companyNameFocus && companyName && !validCompanyName ? \"instructions\" : \"offscreen\"}>\n//               4 to 24 characters.<br />\n//               Must begin with a letter.<br />\n//               Letters, numbers, underscores, hyphens allowed.\n//           </p>\n//           <Field\n//             id=\"email\"\n//             className=\"sign-up-form__email\"\n//             placeholder=\"Enter Email\"\n//             name=\"email\"\n//             type=\"email\"\n//             title=\"Email\"\n//             ref={emailRef}\n//             autoComplete=\"off\"\n//             onChange={(e) => setEmail(e.target.value)}\n//             component={FormInput}\n//             value={email}\n//             required\n//             aria-invalid={validEmail ? \"false\" : \"true\"}\n//             aria-describedby=\"emailnote\"\n//             onFocus={() => setEmailFocus(true)}\n//             onBlur={() => setEmailFocus(false)}\n//           />\n//           <p id=\"uidnote\" className={emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\"}>\n//               4 to 24 characters.<br />\n//               Must begin with a letter.<br />\n//               Letters, numbers, underscores, hyphens allowed.\n//           </p>\n//           <Field\n//             id=\"password\"\n//             className=\"sign-up-form__password\"\n//             name=\"password\"\n//             type=\"password\"\n//             title=\"Password\"\n//             ref={pwdRef}\n//             autoComplete=\"off\"\n//             onChange={(e) => setPwd(e.target.value)}\n//             component={FormInput}\n//             value={pwd}\n//             required\n//             aria-invalid={validPwd ? \"false\" : \"true\"}\n//             aria-describedby=\"pwdnote\"\n//             onFocus={() => setPwdFocus(true)}\n//             onBlur={() => setPwdFocus(false)}\n//           />\n//           <p id=\"uidnote\" className={pwdFocus && pwd && !validPwd ? \"instructions\" : \"offscreen\"}>\n//               4 to 24 characters.<br />\n//               Must begin with a letter.<br />\n//               Letters, numbers, underscores, hyphens allowed.\n//           </p>\n//           <Field\n//             className=\"sign-up-form__create-account\"\n//             name=\"createaccount\"\n//             type=\"submit\"\n//             title=\"Create Account\"\n//             component={FormButton}\n//           />\n//           <div className='sign-up-form__text-links'>\n//               <TextLink to='/signin' text='Already Registered? Login'/>\n//           </div>\n//         </Form>\n//       </div>\n//     )}\n//   </>\n//   );\n// }\n// export default reduxForm({\n//   form: 'register'\n// })(RegisterForm)","map":{"version":3,"sources":["/Users/macbookair/Desktop/WEB -MOBILE-DEVELOPMENT 2021/React-Folder/The_Wright_Logistics/my-app/src/components/auth/RegisterForm.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEI;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["// import React, {useRef, useState, useEffect } from \"react\";\n// import { reduxForm, Field, Form } from \"redux-form\";\n// // import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// // import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { FormTitle } from \"../formTitle\";\n// import { FormInput, FormButton } from \"../formFields\";\n// import TextLink from \"../textLink\";\n// import './RegisterForm.css'\n// // import axios from '../api/axios'\n\n// // const FULLNAME_REGEX=/^[A-z][A-z0-9-_]{3,23}$/;\n// // const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// // const COMPANY_REGEX =/^[A-z][A-z0-9-_]{3,23}$/;\n// // const EMAIL_REGEX= /^[A-z][A-z0-9-_]{3,23}$/;\n// // const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n\n\n\n// // const REGISTER_URL = '/register';\n\n// const RegisterForm = () => {\n//     const fullNameRef = useRef();\n//     const userRef = useRef();\n//     const companyRef = useRef();\n//     const emailRef = useRef();\n//     const pwdRef = useRef();\n//     const errRef = useRef();\n\n//     const [fullName, setFullName] = useState('');\n//     const [validFullName, setValidFullName] = useState(false);\n//     const [fullNameFocus, setFullNameFocus] = useState(false);  \n\n//     const [user, setUser] = useState('');\n//     const [validName, setValidName] = useState(false);\n//     const [userFocus, setUserFocus] = useState(false);\n\n//     const [companyName, setCompanyName] = useState('');\n//     const [validCompanyName, setValidCompanyName] = useState(false);\n//     const [companyNameFocus, setCompanyNameFocus] = useState(false); \n    \n//     const [email, setEmail] = useState('');\n//     const [validEmail, setValidEmail] = useState(false);\n//     const [emailFocus, setEmailFocus] = useState(false);  \n\n//     const [pwd, setPwd] = useState('');\n//     const [validPwd, setValidPwd] = useState(false);\n//     const [pwdFocus, setPwdFocus] = useState(false);  \n\n//     const [errMsg, setErrMsg] = useState('');\n//     const [success, setSuccess] = useState(false);\n\n//     useEffect(() => {\n//         userRef.current.focus();\n//     }, [])\n\n    // useEffect(() => {\n    //     setValidFullName(USER_REGEX.test(fullName));\n    // }, [fullName])\n\n    // useEffect(() => {\n    //     setValidName(USER_REGEX.test(user));\n    // }, [user])\n\n    // useEffect(() => {\n    //     setValidEmail(USER_REGEX.test(companyName));\n    // }, [companyName])\n\n    // useEffect(() => {\n    //     setValidCompanyName(USER_REGEX.test(email));\n    // }, [email])\n\n    // useEffect(() => {\n    //     setValidPwd(PWD_REGEX.test(pwd));\n    // }, [pwd])\n\n    // useEffect(() => {\n    //     setErrMsg('');\n    // }, [user, pwd])\n\n    // const handleSubmit = (e) => {\n\n    // }\n\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault();\n  //       const v1 = USER_REGEX.test(user);\n  //       const v2 = PWD_REGEX.test(pwd);\n  //       const v3 = COMPANY_REGEX.test(companyName);\n  //       const v4 = EMAIL_REGEX.test(user);\n  //       const v5 = FULLNAME_REGEX.test(fullName);\n\n       \n  //       if (!v1 || !v2 || !v3 || !v4 || !v5) {\n  //           setErrMsg(\"Invalid Entry\");\n  //           return;\n  //       }\n  //     try {\n  //         const response = await axios.post(REGISTER_URL,\n  //             JSON.stringify({name: fullName ,userName: user, company: companyName, email: email, password: pwd }),\n  //             {\n  //                 headers: { 'Content-Type': 'application/json' },\n  //                 withCredentials: true\n  //             }\n  //         );\n  //         \n  //         setSuccess(true);\n          \n  //         // clear state and controlled inputs\n  //         // need value attrib on inputs for this\n  //         setFullName('');\n  //         setUser('');\n  //         setCompanyName('');\n  //         setEmail('');\n  //         setPwd('');\n          \n  //     } catch (err) {\n  //         if (!err?.response) {\n  //             setErrMsg('No Server Response');\n  //         } else if (err.response?.status === 409) {\n  //             setErrMsg('Username Taken');\n  //         } else {\n  //             setErrMsg('Registration Failed')\n  //         }\n  //         errRef.current.focus();\n  //     }\n  //   }\n  \n//     return (\n//       <>\n//       {success ? (\n//                 <section>\n//                     <h1>Success!</h1>\n//                     <p>\n//                         <a href=\"#\">Sign In</a>\n//                     </p>\n//                 </section>\n//             ) : (\n//         <div>\n//           <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n\n//         <Form className=\"sign-up-form\" method=\"POST\" action=\"/register\">\n\n      \n//           <FormTitle className=\"sign-up-form__title\" text=\"New User\" />\n//           <Field\n//             id='fullName'\n//             className=\"sign-up-form__fullname\"\n//             name=\"fullname\"\n//             type=\"text\"\n//             title=\"Full Name\"\n//             onChange={(e) => setFullName(e.target.value)}\n//             component={FormInput}\n//             ref={fullNameRef}\n//             autoComplete=\"off\"\n//             required\n//             aria-invalid={validFullName ? \"false\" : \"true\"}\n//             aria-describedby=\"uidnote\"\n//             onFocus={() => setFullNameFocus(true)}\n//             onBlur={() => setFullNameFocus(false)}\n//           />\n//           <p id=\"uidnote\" \n//             className={fullNameFocus && fullName && !validFullName ? \"instructions\" : \"offscreen\"}>\n//             4 to 24 characters.<br />\n//             Must begin with a letter.<br />\n//             Letters, numbers, underscores, hyphens allowed.\n//           </p>\n\n\n//           <Field\n//             id='user'\n//             type=\"text\"\n//             id=\"username\"\n//             ref={userRef}\n//             autoComplete=\"off\"\n//             onChange={(e) => setUser(e.target.value)}\n//             value={user}\n//             required\n//             aria-invalid={validName ? \"false\" : \"true\"}\n//             aria-describedby=\"uidnote\"\n//             onFocus={() => setUserFocus(true)}\n//             onBlur={() => setUserFocus(false)}\n//         />\n//         <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\n//             4 to 24 characters.<br />\n//             Must begin with a letter.<br />\n//             Letters, numbers, underscores, hyphens allowed.\n//         </p>\n\n//           <Field\n//             id='company'\n//             className=\"sign-up-form__fullname\"\n//             placeholder=\"EnterCompany Name\"\n//             name=\"company\"\n//             type=\"text\"\n//             title=\"Company Name\"\n//             ref={companyRef}\n//             autoComplete=\"off\"\n//             onChange={(e) => setCompanyName(e.target.value)}\n//             component={FormInput}\n//             value={companyName}\n//             required\n//             aria-invalid={validCompanyName ? \"false\" : \"true\"}\n//             aria-describedby=\"companynote\"\n//             onFocus={() => setCompanyNameFocus(true)}\n//             onBlur={() => setCompanyNameFocus(false)}\n//           />\n//             <p id=\"uidnote\" className={companyNameFocus && companyName && !validCompanyName ? \"instructions\" : \"offscreen\"}>\n//               4 to 24 characters.<br />\n//               Must begin with a letter.<br />\n//               Letters, numbers, underscores, hyphens allowed.\n//           </p>\n\n//           <Field\n//             id=\"email\"\n//             className=\"sign-up-form__email\"\n//             placeholder=\"Enter Email\"\n//             name=\"email\"\n//             type=\"email\"\n//             title=\"Email\"\n//             ref={emailRef}\n//             autoComplete=\"off\"\n//             onChange={(e) => setEmail(e.target.value)}\n//             component={FormInput}\n//             value={email}\n//             required\n//             aria-invalid={validEmail ? \"false\" : \"true\"}\n//             aria-describedby=\"emailnote\"\n//             onFocus={() => setEmailFocus(true)}\n//             onBlur={() => setEmailFocus(false)}\n\n//           />\n//           <p id=\"uidnote\" className={emailFocus && email && !validEmail ? \"instructions\" : \"offscreen\"}>\n//               4 to 24 characters.<br />\n//               Must begin with a letter.<br />\n//               Letters, numbers, underscores, hyphens allowed.\n//           </p>\n\n//           <Field\n//             id=\"password\"\n//             className=\"sign-up-form__password\"\n//             name=\"password\"\n//             type=\"password\"\n//             title=\"Password\"\n//             ref={pwdRef}\n//             autoComplete=\"off\"\n//             onChange={(e) => setPwd(e.target.value)}\n//             component={FormInput}\n//             value={pwd}\n//             required\n//             aria-invalid={validPwd ? \"false\" : \"true\"}\n//             aria-describedby=\"pwdnote\"\n//             onFocus={() => setPwdFocus(true)}\n//             onBlur={() => setPwdFocus(false)}\n//           />\n//           <p id=\"uidnote\" className={pwdFocus && pwd && !validPwd ? \"instructions\" : \"offscreen\"}>\n//               4 to 24 characters.<br />\n//               Must begin with a letter.<br />\n//               Letters, numbers, underscores, hyphens allowed.\n//           </p>\n\n//           <Field\n//             className=\"sign-up-form__create-account\"\n//             name=\"createaccount\"\n//             type=\"submit\"\n//             title=\"Create Account\"\n//             component={FormButton}\n//           />\n//           <div className='sign-up-form__text-links'>\n//               <TextLink to='/signin' text='Already Registered? Login'/>\n//           </div>\n//         </Form>\n//       </div>\n//     )}\n//   </>\n//   );\n// }\n\n// export default reduxForm({\n//   form: 'register'\n// })(RegisterForm)"]},"metadata":{},"sourceType":"module"}